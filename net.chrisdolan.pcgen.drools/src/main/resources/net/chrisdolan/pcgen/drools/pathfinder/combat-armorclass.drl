package net.chrisdolan.pcgen.drools.pathfinder;
    dialect "java"

import net.chrisdolan.pcgen.drools.input.*;
import net.chrisdolan.pcgen.drools.type.*;

query "Query.ArmorClass.ByType" (String type)
    ArmorClass(actype == type, ac : value)
end
query "Query.ArmorClass"
    ArmorClass(actype == "Normal", ac : value)
end

rule "AC.Initialization"
    salience 1000
    when
    then
        insertLogical(new Input(ArmorClass.TYPE, ArmorClass.SUBTYPE_BASE, 10));
        insertLogical(new StackRule(ArmorClass.TYPE, ArmorClass.SUBTYPE_OTHER, "Sum"));
end

rule "Condition.General.NoDexAC"
    when
        not(not Condition(type == "NoDexAC"))
    then
        insertLogical(new StackRule(ArmorClass.TYPE, ArmorClass.SUBTYPE_DEXTERITY, "None"));
end
rule "Condition.General.NoDodgeAC"
    when
        not(not Condition(type == "NoDodgeAC"))
    then
        insertLogical(new StackRule(ArmorClass.TYPE, ArmorClass.SUBTYPE_DODGE, "None"));
end
rule "Condition.General.YesDodgeAC"
    when
        not Condition(type == "NoDodgeAC")
    then
        insertLogical(new StackRule(ArmorClass.TYPE, ArmorClass.SUBTYPE_DODGE, "Sum"));
end

rule "AC.Dex"
    when
        StatBonus(name == StatInput.DEX, $v:value)
    then
        insertLogical(new Input(ArmorClass.TYPE, ArmorClass.SUBTYPE_DEXTERITY, $v));
end

rule "AC.Normal"
    when
        Number($ac : intValue) from accumulate(
            Stack($v:value, type == ArmorClass.TYPE),
            sum($v)
        )
    then
        insertLogical(new ArmorClass(ArmorClass.ACTYPE_NORMAL, $ac));
end
rule "AC.Touch"
    when
        Number($ac : intValue) from accumulate(
            Stack($v:value, type == ArmorClass.TYPE, subtype not in ( "Armor", "Shield", "Natural" )),
            sum($v)
        )
    then
        insertLogical(new ArmorClass(ArmorClass.ACTYPE_TOUCH, $ac));
end
rule "AC.Normal.Range"
    when
        ArmorClass(actype == ArmorClass.ACTYPE_NORMAL, $touch:value)
        Number($ac : intValue) from accumulate(
            Stack($v:value, type == (ArmorClass.TYPE + ".Range")),
            sum($v)
        )
    then
        insertLogical(new ArmorClass(ArmorClass.ACTYPE_RANGE, $touch+$ac));
end
rule "AC.Normal.Melee"
    when
        ArmorClass(actype == ArmorClass.ACTYPE_NORMAL, $base:value)
        Number($ac : intValue) from accumulate(
            Stack($v:value, type == (ArmorClass.TYPE + ".Melee")),
            sum($v)
        )
    then
        insertLogical(new ArmorClass(ArmorClass.ACTYPE_MELEE, $base+$ac));
end
rule "AC.Touch.Range"
    when
        ArmorClass(actype == ArmorClass.ACTYPE_TOUCH, $touch:value)
        Number($ac : intValue) from accumulate(
            Stack($v:value, type == (ArmorClass.TYPE + ".Range")),
            sum($v)
        )
    then
        insertLogical(new ArmorClass(ArmorClass.ACTYPE_RANGE_TOUCH, $touch+$ac));
end
rule "AC.Touch.Melee"
    when
        ArmorClass(actype == ArmorClass.ACTYPE_TOUCH, $base:value)
        Number($ac : intValue) from accumulate(
            Stack($v:value, type == (ArmorClass.TYPE + ".Melee")),
            sum($v)
        )
    then
        insertLogical(new ArmorClass(ArmorClass.ACTYPE_MELEE_TOUCH, $base+$ac));
end
