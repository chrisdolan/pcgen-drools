package net.chrisdolan.pcgen.drools;
    dialect "java"

import net.chrisdolan.pcgen.drools.input.*;
import net.chrisdolan.pcgen.drools.type.*;

rule "Class.Init"
    salience 1000
    when
    then
        insertLogical(new StackRule("BAB", "ClassLevel", "Sum"));
end

declare PCLevel
    value : int
end

rule "Class.Level.Total"
    when
        MaxClassLevel($class:classname)
        Number(intValue > 0, $sum : intValue) from accumulate(
            $l : LevelInput(classname == $class),
            count($l)
        )
    then
        insertLogical(new Input("ClassLevel", $class, $sum));
end
rule "Class.PCLevel.Total"
    when
        Number(intValue > 0, $sum : intValue) from accumulate(
            $l : LevelInput(),
            count($l)
        )
    then
        insertLogical(new PCLevel($sum));
end
rule "Class.Archetype.Missing"
    when
        Input(type == "ClassLevel", $class:subtype, value > 0)
        not ArchetypeInput($class == classname, name != "Base")
    then
        insertLogical(new ArchetypeInput($class, "Base"));
end
/*
rule "Class.Archetype"
    when
        ArchetypeInput($class:classname,$name:name)
    then
        insertLogical(new Input("Archtype", $class+"."+$name, 1);
end
*/

declare MaxClassLevel
    classname : String
    value : int
end
declare HitDie
    classname : String
    value : int
end
declare BABProgression
    classname : String
    type : String
end
declare SaveProgression
    classname : String
    save : String
    type : String
end

rule "Class.BAB.Progression.Fast"
    when
        Input(type == "ClassLevel", $class:subtype, value > 0, $v:value)
        BABProgression(classname == $class, type == "Fast")
    then
        insertLogical(new Input("BAB", "ClassLevel"+$class, $v));
end
rule "Class.BAB.Progression.Medium"
    when
        Input(type == "ClassLevel", $class:subtype, value > 0, $v:value)
        BABProgression(classname == $class, type == "Medium")
    then
        insertLogical(new Input("BAB", "ClassLevel"+$class, $v*3/4));
end
rule "Class.BAB.Progression.Slow"
    when
        Input(type == "ClassLevel", $class:subtype, value > 0, $v:value)
        BABProgression(classname == $class, type == "Slow")
    then
        insertLogical(new Input("BAB", "ClassLevel"+$class, $v/2));
end

rule "Class.Save.Progression.Fast"
    when
        Input(type == "ClassLevel", $class:subtype, value > 0, $v:value)
        SaveProgression(classname == $class, $save:save, type == "Fast")
    then
        insertLogical(new Input(SavingThrow.TYPE + $save, "ClassLevel"+$class, 2+$v/2));
end
rule "Class.Save.Progression.Slow"
    when
        Input(type == "ClassLevel", $class:subtype, value > 0, $v:value)
        SaveProgression(classname == $class, $save:save, type == "Slow")
    then
        insertLogical(new Input(SavingThrow.TYPE + $save, "ClassLevel"+$class, $v/3));
end
