package net.chrisdolan.pcgen.drools.pathfinder;
    dialect "java"

import net.chrisdolan.pcgen.drools.input.*;
import net.chrisdolan.pcgen.drools.type.*;

query "Query.Conditions"
    Condition(condition : type)
end

declare Condition
    type : String
end

rule "Condition.UserInput"
    when
        ConditionInput($t:type)
    then
        insertLogical(new Condition($t));
end

rule "Condition.Blinded"
    when
        not(not Condition(type == ConditionInput.TYPE_BLINDED))
    then
        insertLogical(new Condition("NoDexAC"));
        insertLogical(new Input(ArmorClass.TYPE, ArmorClass.SUBTYPE_OTHER, -2));
end
rule "Condition.Cowering"
    when
        not(not Condition(type == ConditionInput.TYPE_COWERING))
    then
        insertLogical(new Condition("NoDexAC")); // Just to AC or all dex??
        insertLogical(new Input(ArmorClass.TYPE, ArmorClass.SUBTYPE_OTHER, -2));
end
rule "Condition.Entangled"
    when
        not(not Condition(type == ConditionInput.TYPE_ENTANGLED))
    then
        insertLogical(new Input("Attack", "Entanged", -2));
        insertLogical(new Input(StatInput.TYPE + StatInput.DEX, "Entanged", -4));
end
rule "Condition.Exhausted"
    when
        not(not Condition(type == ConditionInput.TYPE_EXHAUSTED))
    then
        insertLogical(new Input(StatInput.TYPE + StatInput.STR, "Exhausted", -6));
        insertLogical(new Input(StatInput.TYPE + StatInput.DEX, "Exhausted", -6));
end
rule "Condition.Fatigued"
    when
        not(not Condition(type == ConditionInput.TYPE_FATIGUED))
        not Condition(type == ConditionInput.TYPE_EXHAUSTED) // these don't stack
    then
        insertLogical(new Input(StatInput.TYPE + StatInput.STR, "Fatigued", -2));
        insertLogical(new Input(StatInput.TYPE + StatInput.DEX, "Fatigued", -2));
end
rule "Condition.FlatFooted"
    when
        not(not Condition(type == ConditionInput.TYPE_FLATFOOTED))
    then
        insertLogical(new Condition("NoDexAC"));
        insertLogical(new Condition("NoDodgeAC"));
end
rule "Condition.Grappled"
    when
        not(not Condition(type == ConditionInput.TYPE_GRAPPLED))
        not Condition(type == ConditionInput.TYPE_PINNED) // they do not stack
    then
        insertLogical(new Input(StatInput.TYPE + StatInput.DEX, "Grappled", -4));
end
rule "Condition.Helpless"
    when
        not(not Condition(type == ConditionInput.TYPE_HELPLESS))
    then
        insertLogical(new Input("Override", StatInput.TYPE + StatInput.DEX, 0));
end
rule "Condition.Panicked"
    when
        not(not Condition(type == ConditionInput.TYPE_PANICKED))
    then
        insertLogical(new Input(SavingThrow.TYPE + SavingThrow.FORT, "Panicked", -2));
        insertLogical(new Input(SavingThrow.TYPE + SavingThrow.REFL, "Panicked", -2));
        insertLogical(new Input(SavingThrow.TYPE + SavingThrow.WILL, "Panicked", -2));
        insertLogical(new Input("Attack", "Panicked", -2));
        // ...
end
rule "Condition.Paralyzed"
    when
        not(not Condition(type == ConditionInput.TYPE_PARALYZED))
    then
        insertLogical(new Input("Override", StatInput.TYPE + StatInput.STR, 0));
        insertLogical(new Condition(ConditionInput.TYPE_HELPLESS));
end
rule "Condition.Petrified"
    when
        not(not Condition(type == ConditionInput.TYPE_PETRIFIED))
    then
        insertLogical(new Condition(ConditionInput.TYPE_UNCONSCIOUS));
end
rule "Condition.Pinned"
    when
        not(not Condition(type == ConditionInput.TYPE_PINNED))
    then
        insertLogical(new Condition(ConditionInput.TYPE_FLATFOOTED));
        insertLogical(new Input(ArmorClass.TYPE, ArmorClass.SUBTYPE_OTHER, -4));
end
rule "Condition.Prone"
    when
        not(not Condition(type == ConditionInput.TYPE_PRONE))
    then
        insertLogical(new Input("Attack", "Prone", -4));
        insertLogical(new Input(ArmorClass.TYPE+".Range", ArmorClass.SUBTYPE_OTHER, 4));
        insertLogical(new Input(ArmorClass.TYPE+".Melee", ArmorClass.SUBTYPE_OTHER, -4));
end
rule "Condition.Shaken"
    when
        not(not Condition(type == ConditionInput.TYPE_SHAKEN))
        not Condition(type == ConditionInput.TYPE_PANICKED) // they don't stack
    then
        insertLogical(new Input(SavingThrow.TYPE + SavingThrow.FORT, "Shaken", -2));
        insertLogical(new Input(SavingThrow.TYPE + SavingThrow.REFL, "Shaken", -2));
        insertLogical(new Input(SavingThrow.TYPE + SavingThrow.WILL, "Shaken", -2));
        insertLogical(new Input("Attack", "Shaken", -2));
        // ...
end
rule "Condition.Stunned"
    when
        not(not Condition(type == ConditionInput.TYPE_STUNNED))
    then
        insertLogical(new Input(ArmorClass.TYPE, ArmorClass.SUBTYPE_OTHER, -2));
        insertLogical(new Condition("NoDexAC"));
end
rule "Condition.Unconscious"
    when
        not(not Condition(type == ConditionInput.TYPE_UNCONSCIOUS))
    then
        insertLogical(new Condition(ConditionInput.TYPE_HELPLESS));
end
