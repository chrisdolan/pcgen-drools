package net.chrisdolan.pcgen.drools.pathfinder;
    dialect "java"

import net.chrisdolan.pcgen.drools.input.*;
import net.chrisdolan.pcgen.drools.type.*;

query "Query.Race.Name"
    Race(race : name)
end

declare Race
    name : String
end
declare RaceStatChoice
    bonus : int
end
declare RacialAge
    adulthood : int
    middleage : int
    old       : int
    venerable : int
end
declare AgeType
    name : String
end
declare RacialBonusLanguage
    name : String
end

rule "Race.Missing"
    when
        not Race()
    then
        // Treat as humanoid, without the specific human advantages. Mainly for unit tests or early PC creation
        insertLogical(new Size("Medium"));
        insertLogical(new Input("Speed", "Base", 30));
        insertLogical(new Language("Common"));
        insertLogical(new RacialAge(15,35,53,70));
end

rule "Race.Dwarf"
    when
        Race(name == RaceInput.DWARF)
    then
        insertLogical(new Input("Stat."+StatInput.CON, "Racial", 2));
        insertLogical(new Input("Stat."+StatInput.WIS, "Racial", 2));
        insertLogical(new Input("Stat."+StatInput.CHA, "Racial", -2));
        insertLogical(new Size("Medium"));
        insertLogical(new Input("Speed", "Base", 20));
        insertLogical(new Ability("SlowAndSteady"));
        insertLogical(new Ability("Darkvision"));
        insertLogical(new Ability("Dwarf.DefensiveTraining"));
        insertLogical(new Ability("Dwarf.Greed"));
        insertLogical(new Ability("Dwarf.Hatred"));
        insertLogical(new Ability("Dwarf.Hardy"));
        insertLogical(new Input("CMD.BullRush", "Racial", 4));
        insertLogical(new Input("CMD.Trip", "Racial", 4));
        insertLogical(new Ability("Dwarf.Stonecunning"));
        // todo: weapon familiarity
        insertLogical(new Language("Common"));
        insertLogical(new Language("Dwarven"));
        insertLogical(new RacialAge(40,125,188,250));
        insertLogical(new RacialBonusLanguage("Giant"));
        insertLogical(new RacialBonusLanguage("Gnome"));
        insertLogical(new RacialBonusLanguage("Goblin"));
        insertLogical(new RacialBonusLanguage("Orc"));
        insertLogical(new RacialBonusLanguage("Terran"));
        insertLogical(new RacialBonusLanguage("Undercommon"));
end

rule "Race.Elf"
    when
        Race(name == RaceInput.ELF)
    then
        insertLogical(new Input("Stat."+StatInput.DEX, "Racial", 2));
        insertLogical(new Input("Stat."+StatInput.INT, "Racial", 2));
        insertLogical(new Input("Stat."+StatInput.CON, "Racial", -2));
        insertLogical(new Size("Medium"));
        insertLogical(new Input("Speed", "Base", 30));
        insertLogical(new Ability("LowLightVision"));
        insertLogical(new Ability("Elf.Immunities"));
        insertLogical(new Input("CasterLevel.SR", "Racial", 2));
        insertLogical(new Ability("Elf.Magic.Spellcraft"));
        insertLogical(new Input("SkillBonus.Perception", "Racial", 2));
        // todo: weapon familiarity
        insertLogical(new Language("Common"));
        insertLogical(new Language("Elven"));
        insertLogical(new RacialAge(110,175,263,350));
        insertLogical(new RacialBonusLanguage("Celestial"));
        insertLogical(new RacialBonusLanguage("Draconic"));
        insertLogical(new RacialBonusLanguage("Gnoll"));
        insertLogical(new RacialBonusLanguage("Gnome"));
        insertLogical(new RacialBonusLanguage("Goblin"));
        insertLogical(new RacialBonusLanguage("Orc"));
        insertLogical(new RacialBonusLanguage("Sylvan"));
end

rule "Race.Gnome"
    when
        Race(name == RaceInput.GNOME)
    then
        insertLogical(new Input("Stat."+StatInput.CON, "Racial", 2));
        insertLogical(new Input("Stat."+StatInput.CHA, "Racial", 2));
        insertLogical(new Input("Stat."+StatInput.STR, "Racial", -2));
        insertLogical(new Size("Small"));
        insertLogical(new Input("Speed", "Base", 20));
        insertLogical(new Ability("LowLightVision"));
        insertLogical(new Ability("Gnome.DefensiveTraining"));
        insertLogical(new Ability("Gnome.Magic"));
        insertLogical(new Ability("Gnome.Hatred"));
        insertLogical(new Ability("Gnome.IllusionResistance"));
        insertLogical(new Input("SkillBonus.Perception", "Racial", 2));
        insertLogical(new Ability("Gnome.Obsession"));
        // todo: weapon familiarity
        insertLogical(new Language("Common"));
        insertLogical(new Language("Gnome"));
        insertLogical(new Language("Sylvan"));
        insertLogical(new RacialAge(40,100,150,200));
        insertLogical(new RacialBonusLanguage("Draconic"));
        insertLogical(new RacialBonusLanguage("Dwarven"));
        insertLogical(new RacialBonusLanguage("Elven"));
        insertLogical(new RacialBonusLanguage("Giant"));
        insertLogical(new RacialBonusLanguage("Goblin"));
        insertLogical(new RacialBonusLanguage("Orc"));
end

rule "Race.HalfElf"
    when
        Race(name == RaceInput.HALFELF)
    then
        insertLogical(new RaceStatChoice(2));
        insertLogical(new Size("Medium"));
        insertLogical(new Input("Speed", "Base", 30));
        insertLogical(new Ability("LowLightVision"));
        // todo: skill focus
        // todo: elf blood
        insertLogical(new Ability("Elf.Immunities"));
        insertLogical(new Input("SkillBonus.Perception", "Racial", 2));
        // todo: multitalented
        // todo: weapon familiarity
        insertLogical(new Language("Common"));
        insertLogical(new Language("Elven"));
        insertLogical(new RacialAge(20,62,93,125));
end

rule "Race.HalfOrc"
    when
        Race(name == RaceInput.HALFORC)
    then
        insertLogical(new RaceStatChoice(2));
        insertLogical(new Size("Medium"));
        insertLogical(new Input("Speed", "Base", 30));
        insertLogical(new Ability("Darkvision"));
        insertLogical(new Input("SkillBonus.Intimidate", "Racial", 2));
        // todo: orc blood
        // todo: orc ferocity
        // todo: weapon familiarity
        insertLogical(new Language("Common"));
        insertLogical(new Language("Orc"));
        insertLogical(new RacialAge(14,30,45,60));
        insertLogical(new RacialBonusLanguage("Abyssal"));
        insertLogical(new RacialBonusLanguage("Draconic"));
        insertLogical(new RacialBonusLanguage("Giant"));
        insertLogical(new RacialBonusLanguage("Gnoll"));
        insertLogical(new RacialBonusLanguage("Goblin"));
end

rule "Race.Halfling"
    when
        Race(name == RaceInput.HALFLING)
    then
        insertLogical(new Input("Stat."+StatInput.DEX, "Racial", 2));
        insertLogical(new Input("Stat."+StatInput.CHA, "Racial", 2));
        insertLogical(new Input("Stat."+StatInput.STR, "Racial", -2));
        insertLogical(new Size("Small"));
        insertLogical(new Input("Speed", "Base", 20));
        // todo: fearless
        insertLogical(new Input(SavingThrow.TYPE + SavingThrow.FORT, "Racial", 1));
        insertLogical(new Input(SavingThrow.TYPE + SavingThrow.REFL, "Racial", 1));
        insertLogical(new Input(SavingThrow.TYPE + SavingThrow.WILL, "Racial", 1));
        insertLogical(new Input("SkillBonus.Perception", "Racial", 2));
        insertLogical(new Input("SkillBonus.Acrobatics", "Racial", 2));
        insertLogical(new Input("SkillBonus.Climb", "Racial", 2));
        // todo: weapon familiarity
        insertLogical(new Language("Common"));
        insertLogical(new Language("Halfling"));
        insertLogical(new RacialAge(20,50,75,100));
        insertLogical(new RacialBonusLanguage("Dwarven"));
        insertLogical(new RacialBonusLanguage("Elven"));
        insertLogical(new RacialBonusLanguage("Gnome"));
        insertLogical(new RacialBonusLanguage("Goblin"));
end

rule "Race.Human"
    when
        Race(name == RaceInput.HUMAN)
    then
        insertLogical(new RaceStatChoice(2));
        insertLogical(new Size("Medium"));
        insertLogical(new Input("Speed", "Base", 30));
        insertLogical(new Language("Common"));
        // todo: bonus feat
        // todo: bonus skill
        insertLogical(new RacialAge(15,35,53,70));
end
rule "Race.StatBonuses"
    when
        RaceStatChoice($bonus : bonus)
        ChoiceInput(type == "StatBonusChoice", subtype == "Race", $stat:value)
    then
        insertLogical(new Input(StatInput.TYPE + $stat, "Race", $bonus));
end


rule "Validation.Race.Missing"
    when
        not Race()
    then
        insertLogical(new MissingInputViolation("Race.Missing", "Please choose a race", new Race("Human")));
end
rule "Validation.Race.Unknown"
    when
        $r : Race($name : name)
        not Size()
    then
        insertLogical(new InvalidInputViolation("Race.Unknown", "Unknown/incomplete race: " + $name, new Object[]{$r}));
end
