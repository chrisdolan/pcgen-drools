package net.chrisdolan.pcgen.drools.pathfinder;
    dialect "java"

import net.chrisdolan.pcgen.drools.input.*;
import net.chrisdolan.pcgen.drools.type.*;
import java.util.Set;

// field naming convention: a skill "name" is a skill "type.subtype" or just "type" if subtype is null

query "Query.Skills.SkillBonus" (String skillname)
    SkillBonus(name == skillname, value : value)
end

declare SkillRanks
    name : String
    type : String
    subtype : String
    ranks : int
    classname : String
end
declare SkillType
    name : String
    stat : String
    untrained : boolean
    armorcheck : boolean
end
declare ClassSkill
    classname : String
    name : String
end
declare ClassSkillOverride
    classname : String
end
declare SkillBonus
    name : String
    value : int
end

rule "Skills.Init"
    salience 1000
    when
    then
        insertLogical(new SkillType("Acrobatics", StatInput.DEX, true, true));
        insertLogical(new SkillType("Acrobatics.Jump", StatInput.DEX, true, true));
        insertLogical(new SkillType("Appraise", StatInput.INT, true, false));
        insertLogical(new SkillType("Bluff", StatInput.CHA, true, false));
        insertLogical(new SkillType("Climb", StatInput.STR, true, true));
        insertLogical(new SkillType("Craft", StatInput.INT, true, false));
        insertLogical(new SkillType("Diplomacy", StatInput.CHA, true, false));
        insertLogical(new SkillType("DisableDevice", StatInput.DEX, false, true));
        insertLogical(new SkillType("Disguise", StatInput.CHA, true, false));
        insertLogical(new SkillType("EscapeArtist", StatInput.DEX, true, true));
        insertLogical(new SkillType("Fly", StatInput.DEX, true, true));
        insertLogical(new SkillType("HandleAnimal", StatInput.CHA, false, false));
        insertLogical(new SkillType("Heal", StatInput.WIS, true, false));
        insertLogical(new SkillType("Intimidate", StatInput.CHA, true, false));
        insertLogical(new SkillType("Knowledge.Arcana", StatInput.INT, false, false));
        insertLogical(new SkillType("Knowledge.Dungeoneering", StatInput.INT, false, false));
        insertLogical(new SkillType("Knowledge.Engineering", StatInput.INT, false, false));
        insertLogical(new SkillType("Knowledge.Geography", StatInput.INT, false, false));
        insertLogical(new SkillType("Knowledge.History", StatInput.INT, false, false));
        insertLogical(new SkillType("Knowledge.Local", StatInput.INT, false, false));
        insertLogical(new SkillType("Knowledge.Nature", StatInput.INT, false, false));
        insertLogical(new SkillType("Knowledge.Nobility", StatInput.INT, false, false));
        insertLogical(new SkillType("Knowledge.Planes", StatInput.INT, false, false));
        insertLogical(new SkillType("Knowledge.Religion", StatInput.INT, false, false));
        insertLogical(new SkillType("Linguistics", StatInput.INT, true, false));
        insertLogical(new SkillType("Perception", StatInput.WIS, true, false));
        insertLogical(new SkillType("Perform", StatInput.CHA, true, false));
        insertLogical(new SkillType("Profession", StatInput.WIS, false, false));
        insertLogical(new SkillType("Ride", StatInput.DEX, true, true));
        insertLogical(new SkillType("SenseMotive", StatInput.WIS, true, false));
        insertLogical(new SkillType("SleightOfHand", StatInput.DEX, false, true));
        insertLogical(new SkillType("Spellcraft", StatInput.INT, false, false));
        insertLogical(new SkillType("Stealth", StatInput.DEX, true, true));
        insertLogical(new SkillType("Survival", StatInput.WIS, true, false));
        insertLogical(new SkillType("Swim", StatInput.STR, true, true));
        insertLogical(new SkillType("UseMagicDevice", StatInput.CHA, false, false));
end

rule "Skills.UserInput"
    when
        SkillInput($t:name, $st:category, $r:ranks, $classname:classname)
    then
        insertLogical(new SkillRanks($t + ($st == null ? "" : "." + $st), $t, $st, $r, $classname));
end

rule "Skills.Ranks"
    salience 2
    when
        SkillRanks($skill:name, $r:ranks)
    then
        insertLogical(new Input("SkillBonus."+$skill, "Ranks", $r));
end

declare _NewSkill // just a temporary object, never injected
    skillType : SkillType
    classSkill : List
end
rule "Skills.InventedSubtypes"
    // This injects new Craft, Profession and Perform subtypes.
    salience 1
    when
        $newskills : Set() from accumulate(
            SkillRanks(subtype != null, type in ("Craft", "Profession", "Perform" ), $skill:name, $t:type)
            and SkillType($t == name, $stat:stat, $untrained:untrained, $armorcheck:armorcheck)
            and $cs : (List() from collect( ClassSkill($t== name) )),
            collectSet( new _NewSkill( new SkillType($skill, $stat, $untrained, $armorcheck), $cs ) )
            )
    then
        for (Object o : $newskills) {
            _NewSkill n = (_NewSkill) o;
            insertLogical(n.getSkillType());
            List cs = n.getClassSkill();
            for (Object cso : cs) {
                ClassSkill clsk = (ClassSkill) cso;
                insertLogical(new ClassSkill(clsk.getClassname(), n.getSkillType().getName()));
            } 
        }
end

rule "Skills.Ability.Untrained"
    when
        SkillType($skill:name, $stat:stat, true == untrained)
        StatBonus($stat == name, $v:value)
    then
        insertLogical(new Input("SkillBonus."+$skill, "Stat", $v));
end

rule "Skills.Ability.Trained"
    when
        SkillType($skill:name, $stat:stat, false == untrained)
        StatBonus($stat == name, $v:value)
        Stack(type == ("SkillBonus."+$skill), subtype == "Ranks", $t:type)
    then
        insertLogical(new Input($t, "Stat", $v));
end

rule "Skills.TrainedClassSkill"
    when
        SkillType($skill:name)
        Input("ClassLevel" == type, $class:subtype)
        not(not SkillRanks($skill == name, $class == classname))
        ClassSkill($class == classname, $skill == name)
    then
        insertLogical(new Input("SkillBonus."+$skill, "Trained", 3)); // default stack of Max
end

rule "Skills.ArmorCheckPenalty"
    when
        ArmorCheckPenalty(value != 0, $v:value)
        SkillType($skill:name, armorcheck == true)
    then
        insertLogical(new Input("SkillBonus."+$skill, "ArmorCheck", $v)); // should stack as Min, but there's just the one so don't bother...
end

rule "Skills.Total.Untrained"
    when
        SkillType($skill:name, true == untrained)
        Number($sum : intValue) from accumulate(
            Stack($v:value, type == "SkillBonus."+$skill),
            sum($v)
        )
    then
        insertLogical(new SkillBonus($skill, $sum));
end

rule "Skills.Total.Trained"
    when
        
        SkillType($skill:name, false == untrained)
        not(not SkillRanks($skill == name))
        Number($sum : intValue) from accumulate(
            Stack($v:value, type == "SkillBonus."+$skill),
            sum($v)
        )
    then
        insertLogical(new SkillBonus($skill, $sum));
end

rule "Validation.Skills.PositiveRanks"
    when
        $r : SkillRanks($skill:type, ranks <= 0) 
    then
        insertLogical(new InvalidInputViolation("Skill.Ranks.Invalid", "Skill ranks must be a positive number: " + $skill, new Object[]{$r}));
end

rule "Validation.Skills.DisallowedSubtype"
    when
        $r : SkillRanks(subtype != null, type not in ( "Knowledge", "Craft", "Profession", "Perform" ), $skill:type) 
    then
        insertLogical(new InvalidInputViolation("Skill.Subtype.Invalid", "Skill type does not allow subtypes: " + $skill, new Object[]{$r}));
end

rule "Validation.Skills.RequiredSubtype"
    when
        $r : SkillRanks(subtype == null, type in ( "Knowledge", "Craft", "Profession", "Perform" ), $skill:type) 
    then
        insertLogical(new InvalidInputViolation("Skill.Subtype.Missing", "Skill type requires a subtype: " + $skill, new Object[]{$r}));
end

rule "Validation.Skills.DisallowedKnowledgeSubtype"
    when
        $r : SkillRanks(type == "Knowledge", subtype != null, $st:subtype)
        not SkillType(name == ("Knowledge." + $st))
    then
        insertLogical(new InvalidInputViolation("Skill.Knowledge.Invalid", "No such Knowledge subtype: " + $st, new Object[]{$r}));
end

rule "Validation.Skills.MaxRanks"
    when
        PCLevel($lvl:value)
        $r : SkillRanks($skill:name, ranks > $lvl, $ranks:ranks)
    then
        insertLogical(new InvalidInputViolation("Skill.Ranks.Excess", "Too many ranks in skill: " + $ranks + " vs. " + $lvl + " for " + $skill, new Object[]{$r}));
end
