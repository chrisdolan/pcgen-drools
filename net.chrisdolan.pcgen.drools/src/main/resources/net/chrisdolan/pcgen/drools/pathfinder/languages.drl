package net.chrisdolan.pcgen.drools.pathfinder;
    dialect "java"

import net.chrisdolan.pcgen.drools.input.*;
import net.chrisdolan.pcgen.drools.type.*;

query "Query.Language.All"
    Language(name : name)
end

declare Language
    name : String
end

rule "Language.UserInput"
    when
        LanguageInput($l:name)
    then
        insertLogical(new Language($l));
end

rule "Validate.Language.RacialBonus"
    when
        $lang : LanguageInput($langname : name)
        RaceInput(languages.contains($lang), $race:name)
        not RacialBonusLanguage($langname == name)
        not(not RacialBonusLanguage())
    then
        insertLogical(new InvalidInputViolation("Language is not on the racial list for " + $race + ": " + $langname, new Object[]{$lang}));  
end

rule "Validate.Language.IntBased"
    when
        $langs : List($numlang : size) from accumulate(
            $lang : LanguageInput($langname : name)
            and RaceInput(languages.contains($lang)),
            collectList($lang)
        )
        Number($intAtLvl1 : intValue) from accumulate(
            // Just the level 1 inputs to Intelligence
            Stack($v:value, type == (StatInput.TYPE + StatInput.INT), subtype in (StatInput.SUBTYPE_BASE, "Age", "Race")),
            sum($v)
        )
    then
        int langsAtLvl1 = Math.max(0, $intAtLvl1/2 - 5);
        if ($numlang > langsAtLvl1)
            insertLogical(new ExcessInputViolation("Too many languages selected at level 1", $langs.toArray()));
        else if ($numlang < langsAtLvl1)  
            insertLogical(new MissingInputViolation("Please select " + (langsAtLvl1 - $numlang) + " language(s) for level 1", new Object[]{}));
end
